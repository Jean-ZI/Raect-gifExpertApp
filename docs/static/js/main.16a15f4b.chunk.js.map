{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAgB,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACxCN,EAAe,OAQf,2BACAO,KAAM,OACNC,MAAST,EACTU,SAnBkB,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,Y,uBCLnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAYH,GADhD,8DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,yBAAKc,UAAW,0CACZ,yBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,+BAAKA,EAAL,OCHCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAmBxC,OAbAC,qBAAY,WACRxB,EAASC,GACRwB,MAAO,SAAAC,GACJC,YAAW,WACPJ,EAAU,CACNf,KAAMkB,EACNL,SAAS,MAEd,UAGR,CAACpB,IAEGqB,EDhByBM,CAAc3B,GAAjCa,EAFsB,EAE5BN,KAAca,EAFc,EAEdA,QAErB,OACI,kBAAC,WAAD,KACI,gCAAMpB,EAAN,KAECoB,GAAW,uBAAGJ,UAAW,oCAAd,cAEZ,yBAAKA,UAAW,aAGRH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACAkB,IAAMlB,EAAIC,IACND,UESbmB,EAzBM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,cAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KAKvB,OACI,kBAAC,WAAD,KACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ6C,EAAWrB,KAAM,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACA4B,IAAM5B,EACNA,SAAWA,UCbnC+B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.16a15f4b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategorias} ) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {\n        setInputValue (e.target.value);\n    };\n    const handleSubmit = (e) => {\n        e.preventDefault ();\n\n        if (inputValue.trim().length > 2) {\n            setCategorias ( cats => [inputValue ,...cats]);\n            setInputValue ('');\n        }\n\n        \n    }\n\n    return (\n        <form onSubmit= {handleSubmit} >\n            <input \n            type= \"text\"\n            value= { inputValue }\n            onChange= { handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}\n","\n\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI ( category ) }&limit=5&api_key=94rOwJXJ7gKnneiaVgu0RJ8WZYh1sBl1`;\n    const resp = await fetch (url);\n    const {data} = await resp.json ();\n\n    const gifs = data.map ( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n\n    return (\n        <div className= \"card animate__animated animate__bounce\">\n            <img src= {url} alt= {title} />\n            <p> {title} </p>\n        </div>\n    )\n}\n","import React, { Fragment } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const {data: images, loading} = useFetchGifs (category);\n\n    return (\n        <Fragment>\n            <h3> {category} </h3>\n\n            {loading && <p className= \"animate__animated animate__flash\">Loading...</p>}\n\n            <div className= \"card-grid\">\n                \n                {\n                    images.map( img => (\n                        <GifGridItem \n                        key= {img.id}\n                        {...img} \n                        />\n                    ))\n                }\n\n            </div>\n            \n        </Fragment>\n    )\n}\n\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/GetGifs'; \n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect ( () => {\n        getGifs (category)\n        .then ( imgs => {\n            setTimeout(() => {\n                setState ({\n                    data: imgs,\n                    loading: false\n                });\n            }, 3000);\n            \n        })\n    }, [category])\n\n    return state;\n}","import React, { Fragment, useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categorias, setCategorias] = useState(['Spiderman']);\n\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategorias= {setCategorias} />\n            <hr/>\n\n            <ol>\n                {\n                    categorias.map ( category => (\n                        <GifGrid \n                        key= {category}\n                        category= {category} \n                        />\n                    ))\n                }\n            </ol>\n        </Fragment>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}